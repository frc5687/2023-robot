plugins {
    id "java"
    id "idea"
    id "edu.wpi.first.GradleRIO" version "2023.4.1"
    id 'com.diffplug.spotless' version '6.12.0'
}
// test new wpilib with patch
//wpi.maven.useLocal = false
//wpi.maven.useFrcMavenLocalDevelopment = true
//wpi.versions.wpilibVersion = '2023.424242.+'
//wpi.versions.wpimathVersion = '2023.424242.+'

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "org.frc5687.chargedup.Main"
def TEAM_IP = "10.56.87.2"
// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    project.logger.lifecycle('Checking if profile mode...')
                    //Enter profile mode with ./gradlew deploy -PprofileMode
                    if (frc.project.hasProperty("profileMode")) {
                        project.logger.lifecycle('Debug mode enabled!')
                        project.logger.lifecycle("Connect JMX client to ${TEAM_IP}:1099 for RoboRIO profiling with visualvm.")
                        jvmArgs.add("-Dcom.sun.management.jmxremote=true")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.port=1099")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.local.only=false")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
                        jvmArgs.add("-Djava.rmi.server.hostname=${TEAM_IP}")
                        jvmArgs.add("-XX:+UseG1GC")
                        jvmArgs.add("-XX:MaxGCPauseMillis=5")
                    } else {
                        jvmArgs.add("-XX:+UseG1GC")
                        jvmArgs.add("-XX:MaxGCPauseMillis=5")
                    }
                    //					robotCommand = "/usr/local/frc/JRE/bin/java -Djava.library.path=/usr/local/frc/third-party/lib -Djava.lang.invoke.stringConcat=BC_SB " + jvmArgs.join(" ") + " " + (debug ? debugFlags : "") + " -jar \"<<BINARY>>\"" + arguments.join(" ")
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}
def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {

    implementation 'org.zeromq:jeromq:0.5.3'
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.12'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
spotless {
    enforceCheck = false
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        indentWithTabs(2)
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'xml', {
        target fileTree('.') {
            include '**/*.xml'
            exclude '**/build/**', '**/build-*/**'
        }
        eclipseWtp('xml')
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore'
            exclude '**/build/**', '**/build-*/**'
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}
// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)
